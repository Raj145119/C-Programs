
#include<stdio.h>
#include<conio.h>

int heapsize=0,n;
int key[10],par[10],adj[10][10],w[10][10];

void build_min_heap(int [],int);
void heapify(int [],int);

void insert(int [],int);
void increase_key(int [],int,int);
void prism(int [],int);
int extract_min(int []);

//int minium(int);

void main()
{
	int i,j,v,v1,e,e1,w1,a[10];
	FILE *fp;
//***********************************************//
	fp=fopen("graph.txt","r");
	fscanf(fp,"%d%d",&v,&e);
	//printf("%d %d",v,e);
	for(i=1;i<=v;i++)
	{
		for(j=1;j<=v;j++)
		adj[i][j]=0;
		a[i]=i;
	}
	n=heapsize=i-1;
	for(i=1;i<=e;i++)
	{
		fscanf(fp,"%d %d %d",&v1,&e1,w1);
		adj[v1][e1]=1;
		adj[e1][v1]=1;
		w[v1][e1]=w1;
		w[e1][v1]=w1;
	}
	prism(a,1);
	//n=heapsize=i-1;
	getch();

}
void heapify(int a[],int i)
{

	int left;
	int right;
	int smallest;
	int temp;
	left=2*i;
	right=2*i+1;
	if(left<=heapsize && a[left]<a[i])
		smallest=left;
	else
		smallest=i;
	if(right<=heapsize && a[right]<a[smallest])
		smallest=right;
	if(smallest!=i)
	{
		 temp=a[i];
		 a[i]=a[smallest];
		 a[smallest]=temp;

		heapify(a,smallest);
	}
}

void build_min_heap( int a[],int n)
{
	 int i,temp;
	 heapsize=n;
	 for(i=(n/2);i>=1;i--)
	  heapify(a,i);
}



int extract_min(int a[])
{
	int min;
	if(a[heapsize]<1)
	printf("under flow");

	min=a[1];
	a[1]=a[heapsize];
	heapsize=heapsize-1;
	heapify(a,1);
	return min;
}
void prism(int a[],int r)
{
	int i,j,u,w1,flag=0;
	for(i=1;i<=n;i++)
	{
		key[i]=1000;
		par[i]=-1;
	}
	key[r]=0;
	build_min_heap(a,n);
	while(n>=1)
	{
		u=extract_min(key);
		flag=1;
		for(i=1;i<=n;i++)
		{
		    for(j=1;j<=n;j++)
		    {
			if(adj[i][j]==1)
			{
				w1=w[i][j];
			      /*	for(k=1;k<=n;k++)
				{
				       /*	if(u==key[k])
						flag=1;
					else
						flag=0;*//*
				}   */
				if(w1<key[flag] )
				{

					key[flag]=w1;
					par[i]=;
					flag++;
				}
			}

		}

	}
}